podTemplate(label: 'mypod',
    volumes: [hostPathVolume(hostPath: '/var/run/docker.sock', mountPath: '/var/run/docker.sock'),
              secretVolume(secretName: 'bx-auth-secret', mountPath: '/var/run/secrets/bx-auth-secret')],
    containers: [
        containerTemplate(
            name: 'gradle',
            image: 'fabiogomezdiaz/bc-jenkins-slave:v10',
            alwaysPullImage: true,
            ttyEnabled: true,
            command: 'cat'
    )]) {

    node ('mypod') {
        container('gradle') {
            stage ('Build') {
                checkout scm
                sh """
                #!/bin/bash

                ./gradlew build -x test
                """
            }
            stage ('Build Docker Image') {
                sh """
                #!/bin/bash

                REGISTRY_NAMESPACE=chrisking

                ./gradlew docker 
                cd docker 
                docker build -t registry.ng.bluemix.net/\${REGISTRY_NAMESPACE}/micro-orders:${env.BUILD_NUMBER} .
                """
            }
            stage ('Push Docker Image to Registry') {
                sh """
                #!/bin/bash

                REGISTRY_NAMESPACE=chrisking

                # Install plugins
                bx plugin install container-registry -r Bluemix

                # TODO: use API key instead of password?

                # Login to Bluemix and init plugins
                bx login -a api.ng.bluemix.net \
                -u `cat /var/run/secrets/bx-auth-secret/CF_EMAIL` \
                -p `cat /var/run/secrets/bx-auth-secret/CF_PASSWORD` \
                -c `cat /var/run/secrets/bx-auth-secret/CF_ACCOUNT` \
                -o `cat /var/run/secrets/bx-auth-secret/CF_ORG` \
                -s `cat /var/run/secrets/bx-auth-secret/CF_SPACE`

                # initialize container registry plugin
                bx cr login

                # push image into bluemix private registry
                docker push registry.ng.bluemix.net/\${REGISTRY_NAMESPACE}/micro-orders:${env.BUILD_NUMBER}
                """
            }
            stage ('Bind services to cluster') {
                sh """
                #!/bin/bash

                KUBE_TOKEN=`cat /var/run/secrets/kubernetes.io/serviceaccount/token`
                KUBE_CLUSTER_NAME=`cat /var/run/secrets/bx-auth-secret/CLUSTER_NAME`

                # Install plugins
                bx plugin install container-service -r Bluemix
                bx cs init

                # find compose for mysql service
                COMPOSE_MYSQL_SVC_NAME=`bx service list | grep compose-for-mysql | sed -e 's/[ ][ ]*compose-for-mysql.*\$//'`

                if [ -z "\${COMPOSE_MYSQL_SVC_NAME}" ]; then
                  echo "No Compose for MySQL service found!"
                  exit 1
                fi

                # bind it to kube secret
                echo "Binding compose for mysql service \${COMPOSE_MYSQL_SVC_NAME} to cluster \${KUBE_CLUSTER_NAME}"
                bx cs cluster-service-bind \${KUBE_CLUSTER_NAME} default \${COMPOSE_MYSQL_SVC_NAME}

                # find messagehub service
                MESSAGEHUB_SVC_NAME=`bx service list | grep messagehub | sed -e 's/[ ][ ]*messagehub.*\$//'`

                if [ -z "\${MESSAGEHUB_SVC_NAME}" ]; then
                  echo "No MessageHub service found!"
                  exit 1
                fi

                # bind it to kube secret
                echo "Binding MessageHub service \${MESSAGEHUB_SVC_NAME} to cluster \${KUBE_CLUSTER_NAME}"
                bx cs cluster-service-bind \${KUBE_CLUSTER_NAME} default \${MESSAGEHUB_SVC_NAME}


                # check if hs256 shared secret is bound
                hs256_key=`kubectl --token=\${KUBE_TOKEN} get secrets | grep "hs256-key" | awk '{print \$1}'`
                if [ -z "\${hs256_key}" ]; then
                    echo "Creating HS256 shared secret ..."
                    kubectl --token=\${KUBE_TOKEN} create secret generic hs256-key --from-literal=key=`cat /dev/urandom | env LC_CTYPE=C tr -dc 'a-zA-Z0-9' | fold -w 256 | head -n 1 | xargs echo -n`
                fi

                """
            }
            stage ('Deploy pod to Kubernetes') {
                sh """
                #!/bin/bash

                COMPOSE_MYSQL_SVC_NAME=`bx service list | grep compose-for-mysql | sed -e 's/[ ][ ]*compose-for-mysql.*\$//'`
                MESSAGEHUB_SVC_NAME=`bx service list | grep messagehub | sed -e 's/[ ][ ]*messagehub.*\$//'`
                # TODO: get the secret name from the service name?
                COMPOSE_MYSQL_SECRET_NAME="binding-\${COMPOSE_MYSQL_SVC_NAME}"
                MESSAGEHUB_SECRET_NAME="binding-\${MESSAGEHUB_SVC_NAME}"
                REGISTRY_NAMESPACE=chrisking
                token=`cat /var/run/secrets/kubernetes.io/serviceaccount/token`
                image_name=registry.ng.bluemix.net/\${REGISTRY_NAMESPACE}/micro-orders:${env.BUILD_NUMBER}

                orders_deployment=`kubectl --token=\${token} get deployments | grep orders-microservice | head -1 | awk '{print \$1}'`
                if [ -z "\${orders_deployment}" ]; then
                    echo -e "Deploying orders microservice"
                    cat kubernetes/orders.yaml | \
                    yaml w - spec.template.spec.containers[0].image \${image_name}| \
                    yaml w - spec.template.spec.containers[0].volumeMounts[0].mountPath /var/run/secrets/binding-refarch-compose-mysql | \
                    yaml w - spec.template.spec.containers[0].volumeMounts[0].name binding-refarch-compose-mysql | \
                    yaml w - spec.template.spec.volumes[0].name binding-refarch-compose-mysql | \
                    yaml w - spec.template.spec.volumes[0].secret.defaultMode 420 | \
                    yaml w - spec.template.spec.volumes[0].secret.secretName \${COMPOSE_MYSQL_SECRET_NAME} | \
                    yaml w - spec.template.spec.containers[0].volumeMounts[1].mountPath /var/run/secrets/binding-refarch-messagehub | \
                    yaml w - spec.template.spec.containers[0].volumeMounts[1].name binding-refarch-messagehub | \
                    yaml w - spec.template.spec.volumes[1].name binding-refarch-messagehub | \
                    yaml w - spec.template.spec.volumes[1].secret.defaultMode 420 | \
                    yaml w - spec.template.spec.volumes[1].secret.secretName \${MESSAGEHUB_SECRET_NAME} | \
                    yaml w - spec.template.spec.containers[0].volumeMounts[2].mountPath /var/run/secrets/hs256-key | \
                    yaml w - spec.template.spec.containers[0].volumeMounts[2].name hs256-key | \
                    yaml w - spec.template.spec.volumes[2].name hs256-key | \
                    yaml w - spec.template.spec.volumes[2].secret.defaultMode 420 | \
                    yaml w - spec.template.spec.volumes[2].secret.secretName hs256-key \
                    > deployment.yml
    
                    kubectl --token=\${token} create -f deployment.yml
                else
                    # rolling update
                    echo -e "Doing a rolling update on orders microservice deployment"
                    kubectl --token=\${token} set image deployment/orders-microservice orders-service=\${image_name}

                    # Watch the rollout update
                    kubectl --token=\${token} rollout status deployment/orders-microservice

                fi

                orders_service=`kubectl --token=\${token} get service| grep orders-service | head -1 | awk '{print \$1}'`
                if [ -z "\${orders_service}" ]; then
                    kubectl --token=\${token} create -f kubernetes/orders-service.yaml
                fi

                """
            }
            stage ('Clean up old images') {
                sh """
                #!/bin/bash
                
                # TODO: delete old images 

                """
            }

        }
    }
}
